import { useState } from "react";
import type { FC, ReactNode } from "react";
import React from "react";

// T型: string型またはnumber型を表す共用型（Union Type）を定義
type T = string | number;

// useFunc: カスタムフックの定義
// ジェネリック型パラメータTを指定し、カンマを追加してJSXタグと区別
// [T, React.Dispatch<React.SetStateAction<T>>]の形で状態と更新関数を返す
const useFunc = <T,>(initState: T): [T, React.Dispatch<React.SetStateAction<T>>] => {
    // useState: Reactのフック関数で状態管理を行う
    // TValue: 現在の状態値
    // setTvalue: 状態を更新するための関数
    const [TValue, setTvalue] = useState<T>(initState);
    
    // フックから状態と更新関数をタプルとして返す
    return [TValue, setTvalue];
};

// SubPage: 指定されたプロパティを表示するコンポーネント
// props: T型のプロパティを受け取る
// ReactNode型を返す
export function SubPage<T = string | number,>(props: T): ReactNode {
    // 受け取ったpropsをフラグメント内に表示
    const [TValue, setTvalue] = useFunc<T>(props);

    return (
        <>
            {String(props)}
            <div>
                {String(TValue)}
            </div>
        </>
    );
} 