name: Deploy to AWS S3

on:
  push:
    branches:
      - "main"


env: 
  AWS_REGION: ap-northeast-1
  AWS_ASSUME_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:${{secrets.ACTION_IAM_ASSUME_ROLE_NAME}}


permissions:
  contents: read
  id-token: write
  packages: write


jobs:
  deploy:
    name: Deploy to S3
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front_end
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Started 
      run: echo ${{ env.AWS_ASSUME_ROLE_ARN }}
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
        role-to-duration-seconds: 1800
        aws-region: ${{ env.AWS_REGION }}
    
    
    - uses: actions/setup-node@v4
      with:
        node-version: "latest"
    - run: npm ci
    - run: npm run build
    - run: ls -la dist/
    
    - name: Upload to S3
      run: |
        aws s3 sync dist/ s3://${{ secrets.FRONT_END_UPLOAD_S3 }}/dist

    
    - name: upload end 
      run: |
        echo end upload

  ecr_to_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api/api_1
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: start to ecr
        run: echo start buidl and depoly to ecr

      
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
          role-to-duration-seconds: 1800
          aws-region: ${{ env.AWS_REGION }}
      
      - uses: aws-actions/amazon-ecr-login@v2
        id: amazon-ecr-login 
      
      - name: docker iamge build
        run: dokcer image build -t temp_api_a_image:latest -f ./dockerfile


      - name: push api server image to ecr
        env:
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outpus.registry }}
          ECR_REPOSITROY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-api_b
        run: |
          docker image tag temp_api_iamge:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha}} \
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} 
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > api-image-uri.txt


      - name: upload image uri name file as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-image-uri
          path: api/api_1/api-image-uri.txt


  deployTask:
    runs-on: ubuntu-latest
    needs: [ecr_to_build]
     

    steps:

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v2
        with:
          name: api-image-uri
          path: artifacts
      - name: Define the image uri
        run:
          echo "API_IMAGE_URI=$(cat artifacts/api-image-uri.txt)"

      - name: aws login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
          role-to-duration-seconds: 1800
          aws-region: ${{ env.AWS_REGION }}



