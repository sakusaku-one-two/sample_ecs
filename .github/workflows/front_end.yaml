name: Deploy to AWS S3

on:
  push:
    branches:
      - "main"


env: 
  AWS_REGION: ap-northeast-1
  AWS_ASSUME_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:${{secrets.ACTION_IAM_ASSUME_ROLE_NAME}}
  ECS_TASK_DEFINTION_API: api/api_1/task_def.json
  
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}


permissions:
  contents: read
  id-token: write
  packages: write


jobs:
  deploy:
    name: Deploy to S3
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front_end
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Started 
      run: echo ${{ env.AWS_ASSUME_ROLE_ARN }}
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
        role-to-duration-seconds: 1800
        aws-region: ${{ env.AWS_REGION }}
    
    
    - uses: actions/setup-node@v4
      with:
        node-version: "latest"
    - run: npm ci
    - run: npm run build
    - run: ls -la dist/
    
    - name: Upload to S3
      run: |
        aws s3 sync dist/ s3://${{ secrets.FRONT_END_UPLOAD_S3 }}/dist

    
    - name: upload end 
      run: |
        echo end upload

  build_to_ecr:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api/api_1
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: start to ecr
        run: echo start buidl and depoly to ecr

      
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
          role-to-duration-seconds: 1800
          aws-region: ${{ env.AWS_REGION }}
      
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      
      - name: docker iamge build
        run: docker image build -t temp_api_a_image:latest .


      - name: push api server image to ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITROY_NAME }}
        run: |
          docker image tag temp_api_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" > api-image-uri.txt



      - name: upload image uri name file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image-uri
          path: api/api_1/api-image-uri.txt


  deployTask:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api/api_1
    needs: [build_to_ecr]
     

    steps:

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: api-image-uri
          path: api/api_1/artifacts

      - name: Define the image uri
        run:
          echo "API_IMAGE_URI=$(cat api/api_1/artifacts/api-image-uri.txt)" >> $GITHUB_ENV

      - name: aws login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ASSUME_ROLE_ARN}}
          role-to-duration-seconds: 1800
          aws-region: ${{ env.AWS_REGION }}

      - name: Fille in the new image URi in the amazon ecs task defnition
        id: render-task-def
        uses: aws-action/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: sample_api
          image: ${{ env.API_IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws_actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
        



